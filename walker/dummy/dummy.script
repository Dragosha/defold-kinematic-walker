-- Properties

go.property('operator', msg.url())

--
-- Local

local spectator_mode = false
local is_debug = false
local urls = { }

local function log(message)
  if is_debug then
    print(message)
  end
end

local function handle_window_event(self, event, data)
  if event == window.WINDOW_EVENT_FOCUS_LOST then
    msg.post(urls.walker, hash 'pause', { is_paused = true })
  elseif event == window.WINDOW_EVENT_FOCUS_GAINED then
    msg.post(urls.walker, hash 'pause', { is_paused = false })
  end
end

--
-- Lifecycle

function init(self)
  if self.operator ~= msg.url('#') then
    urls.operator = self.operator
  end
  
  urls.walker = msg.url('#walker')
  urls.eyes = msg.url('eyes')

  urls.model_crouching = msg.url('model#crouching')
  urls.model_standing = msg.url('model#standing')

  self.restart_position = go.get_position('.')

  msg.post('.', hash 'acquire_input_focus')
  msg.post(urls.model_crouching, hash 'disable')

  if urls.operator then
    msg.post(urls.operator, hash 'follow_point', { object = urls.eyes })
    msg.post(urls.walker, hash 'follow_camera_rotation', { camera = urls.operator })
  end  

  msg.post(urls.walker, hash 'collision_mask', { hash 'default', hash 'trigger' })
  
  window.set_listener(handle_window_event)
end

function on_message(self, message_id, message, sender)
  if message_id == hash 'walker_crouching' then
    log('Dummy is crouching')
    msg.post(urls.model_crouching, hash 'enable')
    msg.post(urls.model_standing, hash 'disable')
  elseif message_id == hash 'walker_standing' then
    log('Dummy is standing')
    msg.post(urls.model_crouching, hash 'disable')
    msg.post(urls.model_standing, hash 'enable')
  elseif message_id == hash 'walker_moving' then
    log('Dummy is moving with speed: ' .. message.speed)
  elseif message_id == hash 'walker_jumping' then
    log('Dummy jumped')
  elseif message_id == hash 'walker_falling' then
    log('Dummy fell from a height: ' .. message.height)
  elseif message_id == hash 'walker_trigger_enter' then
    log('Dummy entred to the trigger: ' .. message.other_id)
  elseif message_id == hash 'walker_trigger_exit' then
    log('Dummy left the trigger: ' .. message.other_id)
  end
end

function on_input(self, action_id, action)
  if action_id == hash 'key_r' and action.released then
    msg.post(urls.walker, hash 'teleport', { position = self.restart_position } )
  elseif action_id == hash 'key_f' and action.released then
    spectator_mode = not spectator_mode
    msg.post(urls.walker, hash 'spectator_mode', { is_enabled = spectator_mode } )
  elseif action_id == hash 'key_l' and action.released then
    is_debug = not is_debug
    msg.post(urls.walker, hash 'debug', { is_enabled = is_debug } )
  end
end